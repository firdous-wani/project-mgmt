// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String? // For Supabase email/password auth
    accounts      Account[]
    sessions      Session[]

    // Custom fields for our app
    projects          ProjectMember[]
    assignedTasks     Task[]
    createdTasks      Task[]          @relation("TaskCreator")
    invitations       Invitation[]
    timezone          String?         @default("UTC")
    notifications     Json?           @default("{\"email\": true, \"push\": true}")
    profilePictureUrl String? // URL for the profile picture in Supabase Storage
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Custom models for the Task Management App
model Project {
    id          String          @id @default(cuid())
    name        String
    description String?
    status      String          @default("active") // e.g., "active", "completed", "archived"
    members     ProjectMember[]
    tasks       Task[]
    invitations Invitation[]
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
}

model ProjectMember {
    id        String   @id @default(cuid())
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    role      String   @default("member") // e.g., "owner", "member", "viewer"
    joinedAt  DateTime @default(now())

    @@unique([projectId, userId])
}

model Task {
    id          String    @id @default(cuid())
    title       String
    description String?
    status      String    @default("todo") // e.g., "todo", "in-progress", "completed"
    priority    String    @default("medium") // e.g., "low", "medium", "high"
    dueDate     DateTime?

    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String

    assignee   User?   @relation(fields: [assigneeId], references: [id])
    assigneeId String?

    creator   User   @relation("TaskCreator", fields: [creatorId], references: [id])
    creatorId String

    taskTags TaskTag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id        String    @id @default(cuid())
    name      String    @unique
    color     String    @default("#3b82f6") // Default blue color
    tasks     TaskTag[]
    createdAt DateTime  @default(now())
}

model TaskTag {
    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId String
    tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId  String

    @@id([taskId, tagId])
}

model Invitation {
    id          String   @id @default(cuid())
    email       String
    token       String   @unique
    expiresAt   DateTime
    invitedBy   User     @relation(fields: [invitedById], references: [id])
    invitedById String
    project     Project  @relation(fields: [projectId], references: [id])
    projectId   String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([token])
    @@index([email])
}
